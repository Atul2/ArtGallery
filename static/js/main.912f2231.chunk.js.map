{"version":3,"sources":["firebase.js","hooks/useDataStore.js","components/ImageGrid.js","components/Modal.js","components/Title.js","hooks/useStorage.js","components/progressBar.js","components/UploadForm.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","dbStorage","storage","timestamp","FieldValue","serverTimestamp","useDataStore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImage","console","log","className","map","div","layout","whileHover","opacity","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImage","e","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","dbCollection","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","types","type","onChange","selected","files","includes","style","color","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.912f2231.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nimport \"firebase/storage\";\r\nimport \"firebase/firestore\";\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyA_UrbjJqf12-cSVitKQw0s-ugTsPnzi2I\",\r\n    authDomain: \"myproject-55f30.firebaseapp.com\",\r\n    projectId: \"myproject-55f30\",\r\n    storageBucket: \"myproject-55f30.appspot.com\",\r\n    messagingSenderId: \"518892027628\",\r\n    appId: \"1:518892027628:web:90b8555ea581e070df2fc9\",\r\n    measurementId: \"G-EJLTRNS2HS\"\r\n};\r\n\r\n//initialize firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nvar db = firebase.firestore();\r\nvar dbStorage = firebase.storage();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\nexport { db, dbStorage, timestamp };","import { useState, useEffect } from 'react';\r\nimport { db } from '../firebase';\r\n\r\nconst useDataStore = (collection) => {\r\n    const [docs, setDocs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const unsub = db.collection(collection)\r\n            .orderBy('createdAt', 'desc')\r\n            .onSnapshot((snap) => {\r\n                let documents = [];\r\n                snap.forEach(doc => {\r\n                    documents.push({ ...doc.data(), id: doc.id });\r\n                });\r\n                setDocs(documents)\r\n            });\r\n        \r\n        return () => unsub();\r\n    }, [collection])\r\n    \r\n    return { docs };\r\n}\r\n\r\n\r\nexport default useDataStore;","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport useDataStore from '../hooks/useDataStore';\r\n\r\nconst ImageGrid = ({setSelectedImage}) => {\r\n    const { docs } = useDataStore('artGallery');\r\n    console.log(docs);\r\n    return (\r\n        <div className=\"img-grid\">\r\n            {docs && docs.map(doc => (\r\n                <motion.div className=\"img-wrap\" key={doc.id}\r\n                    layout\r\n                    whileHover={{opacity: 1}}\r\n                    onClick={() => setSelectedImage(doc.url)}>\r\n                    <motion.img src={doc.url} alt=\"uploaded pic\"\r\n                        initial={{ opacity: 0 }}\r\n                        animate={{ opacity: 1 }}\r\n                        transition={{delay:1}}\r\n                    />\r\n                </motion.div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageGrid;","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\nconst Modal = ({ selectedImage, setSelectedImage }) => {\r\n    const handleClick = (e) => {\r\n        if (e.target.classList.contains('backdrop')) {\r\n            setSelectedImage(null);\r\n        }\r\n    }\r\n    return (\r\n        <motion.div className=\"backdrop\" onClick={handleClick}\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }} \r\n        >\r\n            <motion.img src={selectedImage} alt=\"enlarged pic\"\r\n                initial={{ y: \"-100vh\" }}\r\n                animate={{ y: 0 }}\r\n            />\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React from 'react';\r\n\r\nconst Title = () => {\r\n  return (\r\n    <div className=\"title\">\r\n      <h1>Art-Gallery( Small Mini Project using Firebase, react hooks, functional components )</h1>\r\n      <h2><b>Our Art Gallery</b></h2>\r\n      <p>\" The nice thing about the gallery shows is that without having to pay any money you can just go and see it\r\n\"</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Title;","import { useState, useEffect } from 'react';\r\nimport { dbStorage, db, timestamp } from '../firebase';\r\n\r\nconst useStorage = (file) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [url, setUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        //references\r\n        const storageRef = dbStorage.ref(file.name);\r\n        const dbCollection = db.collection('artGallery');\r\n\r\n\r\n        storageRef.put(file).on('state_changed', (snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage);\r\n        }, (err) => {\r\n            setError(err)\r\n        }, async() => {\r\n                const url = await storageRef.getDownloadURL();\r\n                const createdAt = timestamp();\r\n                dbCollection.add({ url, createdAt });\r\n            setUrl(url);\r\n        })\r\n    }, [file]);\r\n\r\n    return {progress, url, error}\r\n}\r\n\r\nexport default useStorage;","import React, { useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport useStorage from '../hooks/useStorage';\r\n\r\nconst ProgressBar = ({ file, setFile }) => {\r\n    const { url, progress } = useStorage(file);\r\n    console.log(progress, url);\r\n\r\n    useEffect(() => {\r\n        if (url) {\r\n            setFile(null);\r\n        }\r\n    }, [url, setFile])\r\n\r\n    return (\r\n        <motion.div className=\"progress-bar\"\r\n            initial={{ width: 0 }}\r\n            animate={{ width: progress + '%' }}\r\n        ></motion.div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar;","import React,{useState} from 'react';\r\nimport ProgressBar from './progressBar';\r\n\r\nconst UploadForm = () => {\r\n    const [file, setFile] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    const types = ['image/png', 'image/jpeg'];\r\n\r\n    const changeHandler = (e) => {\r\n        let selected = e.target.files[0]; \r\n        if (selected && types.includes(selected.type)) {\r\n            setFile(selected);\r\n            setError(\"\");\r\n        } else {\r\n            setFile(null);\r\n            setError('Please select an image file (png or jpeg)');\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <form>\r\n                <label>\r\n                    <input type=\"file\" onChange={changeHandler} />\r\n                    <span>+</span>\r\n                </label>\r\n                \r\n                <div className=\"output\">\r\n                    {error && <div className=\"error\" style={{ color: \"red\" }}>{error}</div>}\r\n                    {file && <div>{file.name}</div>}\r\n                    {file && <ProgressBar file={file} setFile={setFile}/>}\r\n                </div>\r\n            </form>\r\n       </>\r\n    )\r\n}\r\n\r\nexport default UploadForm;","import React,{useState} from 'react';\nimport ImageGrid from './components/ImageGrid';\nimport Modal from './components/Modal';\nimport Title from './components/Title';\nimport UploadForm from './components/UploadForm';\nfunction App() {\n\n  const [selectedImage, setSelectedImage] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImage={setSelectedImage}/>\n      { selectedImage && (<Modal selectedImage={selectedImage} setSelectedImage={setSelectedImage} />)}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(<App />,document.getElementById('root'));\n\n\n"],"sourceRoot":""}